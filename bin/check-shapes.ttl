#! /usr/bin/env bash

# get directory of this script
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# use it to locate default file to check
DEFAULT_SHAPES="${DIR}/../shapes.ttl"

shapes=${1:-$DEFAULT_SHAPES}

# check if shapes file is available, exit if not
if [ ! -f "$shapes" ]; then
    echo "Shapes file not found: $shapes"
    exit 1
fi

# check if ttl is available and use it fot ttl syntax check
# else warn and skip to next
ttl=$(which ttl)
if [ -z "$ttl" ] || [ ! -x "$ttl" ]; then
    echo "ttl not found or not executable, skipping ttl syntax check"
else
    echo "Checking ttl syntax"
    $ttl "$shapes"
fi

# check if .venv is available, and make it if not
if [ ! -d ".venv" ]; then
    echo "Creating .venv"
    python3 -m venv .venv
fi

# activate the .venv and continue there 
source .venv/bin/activate

# install pyshacl in .venv if not already there
if [ -z "$(pip show pyshacl)" ]; then
    echo "Installing pyshacl"
    pip install pyshacl
fi

# download shacl-shacl ttl to tempfile in .venv/.cache/shacl-shacl.ttl if not already there
# you can get it from https://raw.githubusercontent.com/RDFLib/pySHACL/refs/heads/master/test/resources/sht_tests/core/complex/shacl-shacl-data-shapes.ttl
# NOTE: quite a (possibly needless) hack 
#  - as pyshacl probably has a way to use this via cli switches ...
if [ ! -f ".venv/.cache/shacl-shacl.ttl" ]; then
    mkdir -p .venv/.cache
    # try symlinking it from pyshacl itself at .venv/lib/python3.12/site-packages/pyshacl/assets/shacl-shacl.ttl
    if [ -f ".venv/lib/python3.12/site-packages/pyshacl/assets/shacl-shacl.ttl" ]; then
        echo "Symlinking shacl-shacl.ttl"
        ln -s .venv/lib/python3.12/site-packages/pyshacl/assets/shacl-shacl.ttl .venv/.cache/shacl-shacl.ttl
    else
        # else download it
        echo "Downloading shacl-shacl.ttl"
        curl -s -o .venv/.cache/shacl-shacl.ttl https://raw.githubusercontent.com/RDFLib/pySHACL/refs/heads/master/test/resources/sht_tests/core/complex/shacl-shacl-data-shapes.ttl
    fi
fi

# run pyshacl on shacl file itself using .venv/.cache/shacl-shacl.ttl
echo "Checking shapes against shacl-shacl.ttl"
pyshacl -s .venv/.cache/shacl-shacl.ttl -m -e http://www.w3.org/ns/shacl#shapesGraph "$shapes"


# left todo: consider using our own shapes.ttl to validate some https://marinregions.org/mrgid/${mrgid}.ttl files

